# This is a basic workflow to help you get started with Actions

name: Yocto Build

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it

      - name: Checkout repository and submodules
        uses: actions/checkout@v2
        with:
          submodules: recursive
          
            # Runs a single command using the runners shell
      - name: Source Environment for BitBake
        run: |
             source setup-environment raspberrypi    
          
      - name: Cache
        uses: actions/cache@v3
        id: cache
        with:
          path: |
              ./build/sstate-cache
              ./build/downloads
          key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}  
          restore-keys: |
              ${{ runner.os }}-build-${{ env.cache-name }}-
              ${{ runner.os }}-build-
              ${{ runner.os }}-
              
      - name: Install Cache Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
             bitbake core-image-minimal --runall=fetch 
          
      - name: Preparing Environment
        run: sudo apt-get install gawk wget git-core diffstat unzip texinfo gcc-multilib build-essential chrpath socat libsdl1.2-dev xterm

      # Runs a single command using the runners shell
      - name: Set-up Machine and start build
        run: |
             echo MENDER_SERVER_URL = '"https://hosted.mender.io"' >> conf/local.conf
             echo MENDER_TENANT_TOKEN = '"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJtZW5kZXIudGVuYW50IjoiNjM3NWM4YzQ3ZjBkZWFlZGIyNzlmYjgxIiwiaXNzIjoiTWVuZGVyIiwic3ViIjoiNjM3NWM4YzQ3ZjBkZWFlZGIyNzlmYjgxIn0.IGiJbceVTbgsLQMnkXWP0VLY-ThF3rdOP8Mw9v1x8L-oBLIhHlqNd1bmekY-ZM9BhWiJaJob3dqMqU2weqVgf-gl5BGo2FIzQGa7_vmQQv8-KFlaa90dExNxr-ISOUdRY09_-HbXH42UOLh8gVlpdqpKbFnr0FdwO3ZHycNWQD9-qncuhijpiWRe697-2VA9OvUsiax22ikzBDiLf9Zd9RkILv8Gz4SMgTlQ34u-xCu8v_-EYpOcIitijxdz7ywFVAfRwYilsGHH8z3zhY2HuSdvBj6spNkAqSeGX2eQVADsmbRGUL3ASwmFsw8QKgYRReC4T8dNmohGzHQ20MEr8955FvUMFRpFsB5BOUhIwMwlstdST5HiTrsEDIcTgttL9eczz6g1_jH35ZezTcAWIGKy8vOrI-GpemYPFUQqbt5fl2RiWpV-fq2FWYxk0AeVWum3NDN1hiYuwfQg5N-88TrZn3Q_G66osxISVfnIAIBg4AbkrHPzVgEXYfBvrLxT"' >> conf/local.conf
             bitbake-layers show-layers
             MACHINE=raspberrypi3 bitbake core-image-minimal
             du tmp/deploy
      
      - uses: actions/upload-artifact@v3
        with:
          name: mender-artifacts
          path: |
           build/tmp/deploy/images/raspberrypi3/*.mender
           build/tmp/deploy/images/raspberrypi3/*.sdimg
           
      - name: Upload Artifact to Mender Server
        run: |
            sudo apt-get install mender-cli
            echo Neext-poc-$ | mender-cli login --server https://hosted.mender.io --username neext-development@vaillant-group.com
            mender-cli artifacts --server https://hosted.mender.io upload build/tmp/deploy/images/raspberrypi3/core-image-minimal-raspberrypi3.mender


